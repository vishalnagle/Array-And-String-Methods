Awesome list!  
Let’s break this down **properly**, with **clear explanations** and **examples** for every topic you mentioned.  
I'll organize it into a **simple structure** so you can refer to it easily.

---

# 🌿 **Branching Strategies**

## 1. Feature Branch Workflow
- **Idea**: Every new feature gets its **own branch** from `main`.
- **Steps**:
  ```bash
  git checkout -b feature/new-login
  # Work on feature
  git commit -m "Add login feature"
  git push origin feature/new-login
  ```
- After completion, create a **Pull Request** to merge into `main`.

---

## 2. Git Flow Workflow
- **Idea**: Predefined branches (`develop`, `feature/*`, `release/*`, `hotfix/*`, `main`).
- **Steps**:
  - `develop` → Main branch for ongoing development.
  - `feature/*` → Feature branches from `develop`.
  - `release/*` → Prepare production releases.
  - `hotfix/*` → Critical fixes from `main`.

Example:
```bash
git checkout -b feature/payment develop
```

---

## 3. GitHub Flow
- **Idea**: Simple, only **main branch**. Create feature branches, open PRs early, review, merge.
- Best suited for **continuous deployment**.

---

## 4. Trunk-Based Development
- **Idea**: Everyone works on **small, short-lived branches** or directly on `main`.
- Merge quickly to avoid big conflicts.
  
Example:
```bash
git checkout main
git pull
git checkout -b small-change
# Work, Commit, PR, Merge fast
```

---

# 🔀 **Merge Strategies**

## 1. Fast-Forward Merge
- When the branch is **ahead with no divergence**.
```bash
git checkout main
git merge feature/xyz
# No extra commit created
```

---

## 2. Three-Way Merge
- When branches have diverged. Git compares:
  - `main`
  - `feature`
  - `common ancestor`
- Creates a **new merge commit**.

---

## 3. `git merge --no-ff`
- Forces **a merge commit**, even if fast-forward is possible.
```bash
git merge --no-ff feature/xyz
```

---

# 🔥 **Rebasing**

## 1. `git rebase`
- Moves your branch to the tip of another branch.

Example:
```bash
git checkout feature
git rebase main
```

---

## 2. Interactive Rebase (`git rebase -i`)
- Allows you to **squash, fixup, reword commits**.
```bash
git rebase -i HEAD~3
```

You'll see:
```
pick a1b2c3 Fix login bug
pick d4e5f6 Add logout
pick 789abc Update navbar
```
Change to:
```
pick a1b2c3 Fix login bug
squash d4e5f6 Add logout
squash 789abc Update navbar
```

---

## 3. `git rebase --continue` / `git rebase --abort`
- After fixing conflicts during rebase:
  ```bash
  git rebase --continue
  ```
- If you want to **cancel**:
  ```bash
  git rebase --abort
  ```

---

# ⚡ **Rebase vs Merge**
| Aspect | Rebase | Merge |
|:------:|:------:|:-----:|
| History | Clean, linear | Full, detailed |
| Use | Feature branch | Big team work |
| Conflict resolution | During rebase | During merge |

---

# 🍒 **Cherry Picking**

## `git cherry-pick <commit>`
- Apply **specific commits** from another branch.
```bash
git cherry-pick a1b2c3
```

---

# 💼 **Stashing Work**

## 1. `git stash`
- Save **unfinished changes**.
```bash
git stash
```

## 2. `git stash pop`
- Restore and **remove** the stash.
```bash
git stash pop
```

## 3. `git stash apply`
- Restore but **keep** the stash.
```bash
git stash apply
```

## 4. `git stash list`
- Show all stashes:
```bash
git stash list
```

---

# 🎯 **Squashing Commits**

## `git rebase -i` (pick, squash, fixup)
- During interactive rebase:
  - `squash` → Combine commits.
  - `fixup` → Combine commits and discard commit message.

Example:
```bash
git rebase -i HEAD~3
```
Change `pick` to `squash` or `fixup`.

---

# ⚔️ **Conflict Resolution**

## 1. What Causes Conflicts?
- Same file/line modified in **different branches**.

---

## 2. How to Manually Resolve Conflicts
- Open file, look for:
  ```
  <<<<<<< HEAD
  your changes
  =======
  incoming changes
  >>>>>>> feature/xyz
  ```
- Edit manually → Save → Add → Commit.

---

## 3. Tools
- **VS Code** built-in merge editor.
- **Meld**, **Beyond Compare**, etc.

---

# 🔗 **Submodules**

## 1. Adding a Submodule
```bash
git submodule add https://github.com/other/repo.git path/to/submodule
```

## 2. Cloning Repo with Submodules
```bash
git clone --recurse-submodules <repo-url>
```

## 3. Updating Submodules
```bash
git submodule update --remote
```

---

# 🪝 **Hooks**

## 1. Pre-commit, Pre-push hooks
- Scripts that run **before commit or push**.
- Example `.git/hooks/pre-commit`:
  ```bash
  #!/bin/sh
  npm run lint
  ```

## 2. Husky (for JavaScript/Node projects)
- Easy hook management.

Install:
```bash
npm install husky --save-dev
npx husky install
```
Add a hook:
```bash
npx husky add .husky/pre-commit "npm test"
```

---

# 🔍 **Git Internals**

## 1. How Git Stores Data
- **Blobs**: file content.
- **Trees**: folders.
- **Commits**: snapshots.

---

## 2. SHA-1 Hashing
- Every object (commit, blob, tree) gets a **unique SHA-1 hash**.

---

## 3. Git Object Model
- Everything is an **object** (commit, tree, blob, tag).

---

# 🔎 **Bisecting**

## `git bisect`
- **Binary search** to find bad commits.
```bash
git bisect start
git bisect bad   # current commit is bad
git bisect good v1.0.0   # known good commit
```
Git will checkout in-between commits. Test and tell Git if it's good/bad.

Finish:
```bash
git bisect reset
```

---

# 🌳 **Git Worktrees**

## 1. `git worktree add`
- Create **multiple working directories** from the same repo.
```bash
git worktree add ../other-branch feature/login
```

---

# ✏️ **Amending Commits**

## `git commit --amend`
- Modify the last commit (message or content).

Example:
```bash
git commit --amend
```
Edit message or add changes.

---

# 🛠️ **Reset vs Revert vs Checkout**

| Command | Purpose | Danger Level |
|:-------:|:-------:|:------------:|
| `git reset` | Move HEAD and branch pointer | 🚨 Careful |
| `git revert` | Create a new commit that undoes a commit | ✅ Safe |
| `git checkout` | Switch branches or files | ✅ Safe |

---

# 🏷️ **Advanced Tagging**

## 1. Signing Tags
```bash
git tag -s v1.0.0 -m "signed version 1"
```
(Sign with GPG key)

---

## 2. Annotated vs Lightweight Tags
- **Annotated** → With metadata (recommended).
- **Lightweight** → Just a pointer.

Create:
```bash
git tag -a v1.0.0 -m "Release v1.0.0"   # Annotated
git tag v1.0.0                         # Lightweight
```

---

# 🩹 **Git Patches**

## 1. Create Patch
```bash
git format-patch -1 <commit>
```

## 2. Apply Patch
```bash
git apply patchfile.patch
```

---

# ⚙️ **Git Configuration**

## 1. Global vs Local Config
- Global → User-wide
- Local → Repo-specific

Check:
```bash
git config --global --list
git config --local --list
```

---

## 2. Editing `.gitconfig`
- `~/.gitconfig`
- You can manually edit aliases, username, editor, etc.

---

## 3. Aliases
```bash
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
```
Example:
```bash
git co main
```

---

# 🏗️ **Working with Forks**

## 1. Fork vs Clone
| Fork | Clone |
|:----:|:-----:|
| Copy repo to your GitHub | Copy repo to your machine |

---

## 2. Syncing a Fork
```bash
git remote add upstream https://github.com/original/repo.git
git fetch upstream
git merge upstream/main
git push origin main
```

---

