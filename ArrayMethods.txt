Here's a detailed explanation of all the JavaScript array methods you mentioned, along with examples:

---

## üìå Array Creation Methods

### 1Ô∏è‚É£ `Array.of(...items)`
Creates a new array with the given elements.

```javascript
const arr = Array.of(1, 2, 3);
console.log(arr); // [1, 2, 3]
```

---

### 2Ô∏è‚É£ `Array.from(iterable, mapFn, thisArg)`
Converts an iterable or array-like object into an array.

```javascript
const str = "hello";
const arr = Array.from(str);
console.log(arr); // ['h', 'e', 'l', 'l', 'o']

// With a mapping function
const numbers = Array.from([1, 2, 3], x => x * 2);
console.log(numbers); // [2, 4, 6]
```

---

### 3Ô∏è‚É£ `new Array(size | ...items)`
Creates a new array.

```javascript
const arr1 = new Array(3); // Creates an empty array of length 3
console.log(arr1); // [empty √ó 3]

const arr2 = new Array(1, 2, 3);
console.log(arr2); // [1, 2, 3]
```

---

## üìå Adding & Removing Elements

### 4Ô∏è‚É£ `push(...items)`
Adds elements to the end.

```javascript
const arr = [1, 2];
arr.push(3, 4);
console.log(arr); // [1, 2, 3, 4]
```

---

### 5Ô∏è‚É£ `pop()`
Removes the last element.

```javascript
const arr = [1, 2, 3];
arr.pop();
console.log(arr); // [1, 2]
```

---

### 6Ô∏è‚É£ `unshift(...items)`
Adds elements to the beginning.

```javascript
const arr = [2, 3];
arr.unshift(1);
console.log(arr); // [1, 2, 3]
```

---

### 7Ô∏è‚É£ `shift()`
Removes the first element.

```javascript
const arr = [1, 2, 3];
arr.shift();
console.log(arr); // [2, 3]
```

---

### 8Ô∏è‚É£ `splice(start, deleteCount, ...items)`
Modifies the array by adding/removing elements.

```javascript
const arr = [1, 2, 3, 4];
arr.splice(1, 2, 9, 10); // Removes 2 elements from index 1 and adds 9,10
console.log(arr); // [1, 9, 10, 4]
```

---

### 9Ô∏è‚É£ `fill(value, start, end)`
Fills an array with a static value.

```javascript
const arr = [1, 2, 3, 4];
arr.fill(0, 1, 3);
console.log(arr); // [1, 0, 0, 4]
```

---

### üîü `copyWithin(target, start, end)`
Copies elements within the array.

```javascript
const arr = [1, 2, 3, 4, 5];
arr.copyWithin(1, 3);
console.log(arr); // [1, 4, 5, 4, 5]
```

---

## üìå Searching & Finding Elements

### 1Ô∏è‚É£1Ô∏è‚É£ `indexOf(searchElement, fromIndex)`
Finds the first occurrence index.

```javascript
const arr = [1, 2, 3, 2];
console.log(arr.indexOf(2)); // 1
```

---

### 1Ô∏è‚É£2Ô∏è‚É£ `lastIndexOf(searchElement, fromIndex)`
Finds the last occurrence index.

```javascript
console.log(arr.lastIndexOf(2)); // 3
```

---

### 1Ô∏è‚É£3Ô∏è‚É£ `includes(value, fromIndex)`
Checks if an element exists.

```javascript
console.log(arr.includes(3)); // true
```

---

### 1Ô∏è‚É£4Ô∏è‚É£ `find(callback)`
Finds the first matching element.

```javascript
const result = arr.find(x => x > 1);
console.log(result); // 2
```

---

### 1Ô∏è‚É£5Ô∏è‚É£ `findIndex(callback)`
Finds the index of the first match.

```javascript
console.log(arr.findIndex(x => x > 1)); // 1
```

---

### 1Ô∏è‚É£6Ô∏è‚É£ `findLast(callback)`
Finds the last matching element.

```javascript
console.log(arr.findLast(x => x > 1)); // 2
```

---

### 1Ô∏è‚É£7Ô∏è‚É£ `findLastIndex(callback)`
Finds the index of the last match.

```javascript
console.log(arr.findLastIndex(x => x > 1)); // 3
```

---

## üìå Iteration & Transformation Methods

### 1Ô∏è‚É£8Ô∏è‚É£ `forEach(callback)`
Iterates over array elements.

```javascript
arr.forEach(x => console.log(x * 2));
```

---

### 1Ô∏è‚É£9Ô∏è‚É£ `map(callback)`
Transforms elements into a new array.

```javascript
const mapped = arr.map(x => x * 2);
console.log(mapped); // [2, 4, 6, 4]
```

---

### 2Ô∏è‚É£0Ô∏è‚É£ `filter(callback)`
Filters elements based on condition.

```javascript
const filtered = arr.filter(x => x > 1);
console.log(filtered); // [2, 3, 2]
```

---

### 2Ô∏è‚É£1Ô∏è‚É£ `reduce(callback, initialValue)`
Reduces array to a single value.

```javascript
const sum = arr.reduce((acc, cur) => acc + cur, 0);
console.log(sum); // 8
```

---

### 2Ô∏è‚É£2Ô∏è‚É£ `reduceRight(callback, initialValue)`
Like `reduce`, but right to left.

---

### 2Ô∏è‚É£3Ô∏è‚É£ `every(callback)`
Returns true if all elements pass the test.

```javascript
console.log(arr.every(x => x > 0)); // true
```

---

### 2Ô∏è‚É£4Ô∏è‚É£ `some(callback)`
Returns true if at least one element passes the test.

```javascript
console.log(arr.some(x => x > 2)); // true
```

---

## üìå Sorting & Reordering

### 2Ô∏è‚É£5Ô∏è‚É£ `sort(compareFunction)`
Sorts the array.

```javascript
const nums = [3, 1, 4];
nums.sort((a, b) => a - b);
console.log(nums); // [1, 3, 4]
```

---

### 2Ô∏è‚É£6Ô∏è‚É£ `reverse()`
Reverses the order of elements.

```javascript
nums.reverse();
console.log(nums); // [4, 3, 1]
```

---

## üìå Extracting & Copying

### 2Ô∏è‚É£7Ô∏è‚É£ `slice(start, end)`
Returns a portion of the array.

```javascript
console.log(nums.slice(1, 3)); // [3, 1]
```

---

### 2Ô∏è‚É£8Ô∏è‚É£ `concat(...arrays)`
Merges arrays.

```javascript
console.log(nums.concat([7, 8])); // [4, 3, 1, 7, 8]
```

---

### 2Ô∏è‚É£9Ô∏è‚É£ `flat(depth)`
Flattens nested arrays.

```javascript
console.log([1, [2, [3]]].flat(2)); // [1, 2, 3]
```

---

### 3Ô∏è‚É£0Ô∏è‚É£ `flatMap(callback)`
Maps and flattens.

```javascript
console.log([1, 2].flatMap(x => [x, x * 2])); // [1, 2, 2, 4]
```

---

## üìå Joining & Converting

### 3Ô∏è‚É£1Ô∏è‚É£ `join(separator)`
Joins elements into a string.

```javascript
console.log(nums.join("-")); // "4-3-1"
```

---

### 3Ô∏è‚É£2Ô∏è‚É£ `toString()`
Converts array to string.

---

## üìå Other Utility Methods

### 3Ô∏è‚É£3Ô∏è‚É£ `isArray(value)`
Checks if value is an array.

---

### 3Ô∏è‚É£4Ô∏è‚É£ `at(index)`
Returns element at given index.

---

### 3Ô∏è‚É£5Ô∏è‚É£ `with(index, value)`
Creates a new array with modified value.

```javascript
const arr = [1, 2, 3];
console.log(arr.with(1, 10)); // [1, 10, 3]
```

--------------------------------------------------

